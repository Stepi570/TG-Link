from asyncio import subprocess
import logging
import os
import sys
import asyncio
import webbrowser
from tkinter import Label, Tk, filedialog
import cv2
import psutil
import pyautogui
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, FSInputFile, Message, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from aiogram.filters import Command, CommandStart
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from PIL import ImageGrab
import pygetwindow as gw

API_TOKEN = '7848221838:AAHEGV7HqoFVu18Uv2jcpZmnVjQ2Sj4TcVU' #–í—Å—Ç–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω
Bot = Bot(token=API_TOKEN)
dp = Dispatcher()

awaiting_file = False

class Form(StatesGroup):
    input_variable = State()

exit = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text='–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è')]],
    resize_keyboard=True
)

failss = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='–û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª üì§', callback_data="files1")],
    [InlineKeyboardButton(text='–ü–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª üì•', callback_data="files2")]]
)

def open_file_explorer():
    root = Tk()
    root.withdraw()  # –°–∫—Ä—ã—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–µ –æ–∫–Ω–æ tkinter
    root.attributes('-topmost', True)  # –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ–≤–æ–¥–Ω–∏–∫ –ø–æ–≤–µ—Ä—Ö –¥—Ä—É–≥–∏—Ö –æ–∫–æ–Ω
    file_path = filedialog.askopenfilename()  # –î–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
    return file_path

zero = ReplyKeyboardMarkup(keyboard=[])

startkalava = InlineKeyboardMarkup (inline_keyboard=[
    [InlineKeyboardButton(text='–ó–∞–ø—É—Å—Ç–∏—Ç—å', callback_data="starty"),
    InlineKeyboardButton(text='–ü–æ–º–æ—â—å', callback_data="help", url="https://t.me/Vandallov2")]
])

pover1 = InlineKeyboardMarkup (inline_keyboard=[
    [InlineKeyboardButton(text='–î–∞ ‚úîÔ∏è', callback_data="yes1"),
    InlineKeyboardButton(text='–ù–µ—Ç ‚ùå', callback_data="not")]
])

pover2 = InlineKeyboardMarkup (inline_keyboard=[
    [InlineKeyboardButton(text='–î–∞ ‚úîÔ∏è', callback_data="yes2"),
    InlineKeyboardButton(text='–ù–µ—Ç ‚ùå', callback_data="not")]
])

pover3 = InlineKeyboardMarkup (inline_keyboard=[
    [InlineKeyboardButton(text='–î–∞ ‚úîÔ∏è', callback_data="yes3"),
    InlineKeyboardButton(text='–ù–µ—Ç ‚ùå', callback_data="not")]
])

pover_keyboard = ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton(text='–°–æ–Ω üåô')],
        [KeyboardButton(text= '–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã üì¥')],
        [KeyboardButton(text='–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ üîÉ')],
        [KeyboardButton(text='–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è')]],
        resize_keyboard=True,
        input_field_placeholder='–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∏—Ç–∞–Ω–∏–µ–º...')



main_keyboard = ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton(text='–°–∫—Ä–∏–Ω—à–æ—Ç üñ•Ô∏è'),
        KeyboardButton(text='–§–æ—Ç–æ üì∑')],
        [KeyboardButton(text='–ë—Ä–∞—É–∑–µ—Ä üåê'),
        KeyboardButton(text='–°–∞–π—Ç—ã üì±')],
        [KeyboardButton(text='–ó–∞—Ä—è–¥ üîã'),
        KeyboardButton(text='–§–∞–π–ª—ã üìÅ')],
        [KeyboardButton(text='–ü–∏—Ç–∞–Ω–∏–µ üíª')],
        [KeyboardButton(text='–¢–µ–∫—Å—Ç –Ω–∞ —ç–∫—Ä–∞–Ω ‚úèÔ∏è')],
        [KeyboardButton(text= '–ú–µ–Ω—é ‚öô')]],
        resize_keyboard=True,
        input_field_placeholder='–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é...')

class LinkInput(StatesGroup):
    waiting_for_link = State() 
    
class ScreenTextState(StatesGroup):
    waiting_for_text = State()

class TextDisplayState(StatesGroup):
    waiting_for_text = State()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —ç–∫—Ä–∞–Ω
@dp.message(F.text == "–¢–µ–∫—Å—Ç –Ω–∞ —ç–∫—Ä–∞–Ω ‚úèÔ∏è")
async def request_screen_text(message: Message, state: FSMContext):
    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –Ω–∞ —ç–∫—Ä–∞–Ω–µ ‚úèÔ∏è")
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞
    await state.set_state(TextDisplayState.waiting_for_text)

@dp.message(TextDisplayState.waiting_for_text)
async def display_screen_text(message: Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç
    if not message.text:
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ, —Å–æ–æ–±—â–∞–µ–º –æ–± –æ—à–∏–±–∫–µ
        await message.answer("–û—à–∏–±–∫–∞: –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, —á—Ç–æ–±—ã –æ–Ω –æ—Ç–æ–±—Ä–∞–∑–∏–ª—Å—è –Ω–∞ —ç–∫—Ä–∞–Ω–µ‚ùå")
        return  # –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏

    user_text = message.text  # –ü–æ–ª—É—á–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é tkinter
    def show_text_on_screen(text):
        root = Tk()
        root.title("–¢–µ–∫—Å—Ç –Ω–∞ —ç–∫—Ä–∞–Ω ‚úèÔ∏è")

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–∫–Ω–æ, —á—Ç–æ–±—ã –æ–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞–ª–æ—Å—å –ø–æ–≤–µ—Ä—Ö –≤—Å–µ—Ö –æ–∫–æ–Ω
        root.attributes("-topmost", True)

        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞ –∏ –≤—ã—á–∏—Å–ª—è–µ–º —Ü–µ–Ω—Ç—Ä
        screen_width = root.winfo_screenwidth()
        screen_height = root.winfo_screenheight()
        window_width, window_height = 400, 100
        position_x = (screen_width // 2) - (window_width // 2)
        position_y = (screen_height // 2) - (window_height // 2)
        root.geometry(f"{window_width}x{window_height}+{position_x}+{position_y}")

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ª–µ–π–±–ª
        label = Label(root, text=text, font=("Arial", 16), wraplength=380, justify="center")
        label.pack(expand=True, fill="both")

        # –û–∫–Ω–æ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –æ—Ç–∫—Ä—ã—Ç—ã–º, –ø–æ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–∫—Ä–æ–µ—Ç –µ–≥–æ –≤—Ä—É—á–Ω—É—é
        root.mainloop()

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
    asyncio.create_task(asyncio.to_thread(show_text_on_screen, user_text))
    
    # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ —Ç–µ–∫—Å—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è
    await message.answer("–¢–µ–∫—Å—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –Ω–∞ —ç–∫—Ä–∞–Ω–µ ‚úÖ")

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã —Ñ—É–Ω–∫—Ü–∏—è —Å—Ä–∞–±–æ—Ç–∞–ª–∞ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
    await state.clear()

@dp.message(CommandStart())
@dp.message(F.text == '–ú–µ–Ω—é ‚öô')
async def start(message: Message):
    await message.answer(text='üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ TG Link!\n–≠—Ç–æ—Ç –±–æ—Ç ‚Äî –≤–∞—à –ª–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –¥–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º —á–µ—Ä–µ–∑ Telegram.\n\n–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ TG Link:\nüì∏–ó–∞—Ö–≤–∞—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –∏ —Ñ–æ—Ç–æ —Å –≤–µ–±-–∫–∞–º–µ—Ä—ã\nüåê –û—Ç–∫—Ä—ã—Ç–∏–µ —Å–∞–π—Ç–æ–≤ –∏ –±—Ä–∞—É–∑–µ—Ä–æ–≤\nüîã –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∞—Ç–∞—Ä–µ–∏\nüìÇ –î–æ—Å—Ç—É–ø –∫ —Ñ–∞–π–ª–∞–º –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã–º–∏ –æ–∫–Ω–∞–º–∏\n‚≠ê–ò –µ—â–µ –º–Ω–æ–≥–æ –≤—Å–µ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ\n\n–ü—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é, –∏ TG Link –≤—ã–ø–æ–ª–Ω–∏—Ç –∑–∞–¥–∞—á—É –Ω–∞ –≤–∞—à–µ–º –∫–æ–º–ø—å—é—Ç–µ—Ä–µ!', reply_markup=startkalava)

@dp.callback_query(F.data == "starty")
async def start(callback: CallbackQuery):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
    await callback.message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—åüëæ\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –∏–∑ –º–µ–Ω—é ‚¨áÔ∏è",reply_markup=main_keyboard)

@dp.message(F.text == '–§–∞–π–ª—ã üìÅ')
async def handle_files(message: Message):
    await message.answer(
        '–°–ø–æ—Å–æ–± –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å —Ñ–∞–π–ª–∞–º–∏:',reply_markup=failss)
@dp.message(F.text == '–ü–∏—Ç–∞–Ω–∏–µ üíª')
async def pover(message: Message):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç:', reply_markup=pover_keyboard)

@dp.message(F.text == '–°–æ–Ω üåô')
async def sleep_mode(message: Message):
    await message.answer(text="–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä –≤ —Å–æ–Ω? üåô",reply_markup=pover1)

@dp.message(F.text == '–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ üîÉ')
async def sleep_mode(message: Message):
    await message.answer(text="–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É? üîÉ",reply_markup=pover3)


@dp.message(F.text == '–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã üì¥')
async def off_mode(message: Message):
    await message.answer(text="–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–∫–ª—é—á–∏—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä? üì¥",reply_markup=pover2)

@dp.callback_query(F.data == "yes1")
async def request_file(callback: CallbackQuery):
     await callback.message.answer("–ö–æ–º–ø—å—é—Ç–µ—Ä —É—Ö–æ–¥–∏—Ç –≤ —Å–æ–Ω üåô",reply_markup=main_keyboard)
     os.system("rundll32.exe powrprof.dll,SetSuspendState 0,1,0")

@dp.callback_query(F.data == "yes3")
async def request_file(callback: CallbackQuery):
     await callback.message.answer("–ü–µ—Ä–µ–∞–≥—Ä—É–∑–∫–∞ üîÉ",reply_markup=main_keyboard)
     os.system("shutdown /r /t 0")


@dp.callback_query(F.data == "yes2")
async def request_file(callback: CallbackQuery):
    await callback.message.answer("–í—ã–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞ üì¥",reply_markup=main_keyboard)
    os.system("shutdown /s /t 0")
@dp.callback_query(F.data == "not")
async def request_file(callback: CallbackQuery):
         await callback.message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ ‚ùå", reply_markup=main_keyboard)



@dp.callback_query(F.data == "files1")
async def request_file(callback: CallbackQuery):
    global awaiting_file
    awaiting_file = True  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞
    await callback.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å –Ω–∞ –ü–ö üíæ")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ñ–∞–π–ª–æ–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message(F.content_type.in_({'document', 'photo', 'video', 'video_note', 'audio'}))
async def receive_file(message: types.Message):
    global awaiting_file
    if awaiting_file:
        if message.document:
            file_id = message.document.file_id
            file_name = message.document.file_name
            extension = os.path.splitext(file_name)[1]
        elif message.photo:
            file_id = message.photo[-1].file_id  # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –≤–µ—Ä—Å–∏—é —Ñ–æ—Ç–æ (—Å–∞–º—É—é –±–æ–ª—å—à—É—é)
            file_name = "photo.jpg"
            extension = ".jpg"
        elif message.video:
            file_id = message.video.file_id
            file_name = "video.mp4"
            extension = ".mp4"
        elif message.video_note:
            file_id = message.video_note.file_id
            file_name = "video_note.mp4"
            extension = ".mp4"
        elif message.audio:
            file_id = message.audio.file_id
            file_name = message.audio.file_name or "audio.mp3"
            extension = os.path.splitext(file_name)[1] if file_name else ".mp3"

        # –ó–∞–≥—Ä—É–∑–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
        file = await Bot.get_file(file_id)
        file_path = f"downloaded_file{extension}"
        await Bot.download_file(file.file_path, destination=file_path)

        # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ

        os.startfile(file_path)
        await message.answer(f"–§–∞–π–ª '{file_name}' –ø–æ–ª—É—á–µ–Ω –∏ –æ—Ç–∫—Ä—ã—Ç ‚úÖ")

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞
        awaiting_file = False


@dp.message(lambda message: message.text == '–§–æ—Ç–æ üì∑')
async def send_photo(message: Message):
    await message.answer("–ó–∞–≥—Ä—É–∑–∫–∞...")
    try:
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ
        camera = cv2.VideoCapture(0)
        # –ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –∫–∞–º–µ—Ä—ã
        ret, frame = camera.read()
        # –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        photo_path = os.path.join(os.getcwd(), "photo.jpg")
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª
        cv2.imwrite(photo_path, frame)
        file_path = "photo.jpg"
        file = FSInputFile(file_path)
        await message.answer_document(document=file)
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–∞–º–µ—Ä—É (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
        camera.release()
    except Exception as e:
        await message.answer(f'–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ‚ùå\n\n1.–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã –∏ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –¥–æ—Å—Ç—É–ø –∫ –Ω–µ–π —Ä–∞–∑—Ä–µ—à–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.\n2.–í–æ–∑–º–æ–∂–Ω–æ, –∫–∞–º–µ—Ä–∞ –∑–∞–Ω—è—Ç–∞ –¥—Ä—É–≥–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º, –ª–∏–±–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –¥–ª—è –µ—ë –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.\n–û—à–∏–±–∫–∞:{e}')

class Form(StatesGroup):
    input_variable = State()

@dp.message(F.text == '–°–∞–π—Ç—ã üì±')
async def handle_screenshot(message: types.Message):
    maen_keyboard = ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton(text='YouTube üìº')],
        [KeyboardButton(text='Telegram ‚úàÔ∏è')],
        [KeyboardButton(text='ChatGPT ü§ñ')],
        [KeyboardButton(text='Gmail üì©')],
        [KeyboardButton(text='–°–≤–æ—è —Å—Å—ã–ª–∫–∞ üë§')],
        [KeyboardButton(text='–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è')]],
        resize_keyboard=True,
        input_field_placeholder='–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é...')
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç:', reply_markup=maen_keyboard)

@dp.message(F.text == "YouTube üìº")
async def youtube(message: types.Message):
    webbrowser.open('https://www.youtube.com/')
    await message.answer('–°–∞–π—Ç –æ—Ç–∫—Ä—ã—Ç ‚úÖ')

@dp.message(F.text == "Telegram ‚úàÔ∏è")
async def youtube(message: types.Message):
    webbrowser.open('https://web.telegram.org/a/')
    await message.answer('–°–∞–π—Ç –æ—Ç–∫—Ä—ã—Ç ‚úÖ')

@dp.message(F.text == "ChatGPT ü§ñ")
async def youtube(message: types.Message):
    webbrowser.open('https://chatgpt.com/')
    await message.answer('–°–∞–π—Ç –æ—Ç–∫—Ä—ã—Ç ‚úÖ')

@dp.message(F.text == "Gmail üì©")
async def youtube(message: types.Message):
    webbrowser.open('https://mail.google.com/mail/')
    await message.answer('–°–∞–π—Ç –æ—Ç–∫—Ä—ã—Ç ‚úÖ')

@dp.message(F.text == "–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è")
async def youtube(message: types.Message):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç:',reply_markup=main_keyboard)

@dp.message(F.text == "–°–≤–æ—è —Å—Å—ã–ª–∫–∞ üë§")
async def start_input(message: Message, state: FSMContext):
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏
    await state.set_state(LinkInput.waiting_for_link)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É", reply_markup=types.ReplyKeyboardRemove())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—Å—ã–ª–∫–∏
@dp.message(LinkInput.waiting_for_link)
async def open_link(message: Message, state: FSMContext):
    link = message.text  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç, –≤–≤–µ–¥–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    webbrowser.open(link)  # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Å—ã–ª–∫—É –≤ –±—Ä–∞—É–∑–µ—Ä–µ
    await message.answer('–°–∞–π—Ç –æ—Ç–∫—Ä—ã—Ç ‚úÖ', reply_markup=main_keyboard)

    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –Ω–æ–≤–æ–π —Å—Å—ã–ª–∫–∏ –Ω—É–∂–Ω–æ –±—ã–ª–æ —Å–Ω–æ–≤–∞ –Ω–∞–∂–∞—Ç—å "–°–≤–æ—è —Å—Å—ã–ª–∫–∞ üë§"
    await state.clear()

@dp.message(lambda message: message.text == "–ó–∞—Ä—è–¥ üîã")
async def send_battery_status(message: types.Message):
    try:
        import psutil  # –£–±–µ–¥–∏—Å—å, —á—Ç–æ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ psutil —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
        battery = psutil.sensors_battery()
        percent = battery.percent
        is_plugged = battery.power_plugged
        status = "–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –∑–∞—Ä—è–¥–∫–µ" if is_plugged else "–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –∑–∞—Ä—è–¥–∫–µ"
        await message.answer(f"–ó–∞—Ä—è–¥ –±–∞—Ç–∞—Ä–µ–∏: {percent}%\n–°—Ç–∞—Ç—É—Å: {status}")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {e}")


@dp.callback_query(lambda message: message.data == 'files2')
async def handle_choose_file(callback: CallbackQuery):
    await callback.message.answer("–û—Ç–∫—Ä—ã–≤–∞—é –ø—Ä–æ–≤–æ–¥–Ω–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞...")
    
    # –û—Ç–∫—Ä—ã—Ç–∏–µ –ø—Ä–æ–≤–æ–¥–Ω–∏–∫–∞ –∏ –≤—ã–±–æ—Ä —Ñ–∞–π–ª–∞
    file_path = open_file_explorer()
    
    if file_path:
        try:
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            file = FSInputFile(file_path)
            await callback.message.answer_document(file)
        except Exception as e:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª—é–±–æ–π –æ—à–∏–±–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await callback.message.answer(f"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π ‚ùå")
    else:
        await callback.message.answer("–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω ‚ùå")

@dp.message(F.text == '–°–∫—Ä–∏–Ω—à–æ—Ç üñ•Ô∏è')
async def handle_screenshot(message: types.Message):
    await message.answer("–ó–∞–≥—Ä—É–∑–∫–∞...")
    try:
        screenshot = ImageGrab.grab() 
        save_path = r'screen.jpg'  # –£–∫–∞–∂–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–π –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        screenshot.save(save_path)
        file_path = "screen.jpg"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –ø—É—Ç—å
        file = FSInputFile(file_path)  # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Ñ–∞–π–ª–∞
        await message.answer_document(document=file)
    except Exception as e:  # –õ–æ–≤–∏–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é e
        await message.answer(f"–û—à–∏–±–∫–∞: {e}")

@dp.message(F.text == '–ë—Ä–∞—É–∑–µ—Ä üåê')
async def google(message: Message):
    webbrowser.open("https://")
    await message.answer('–ë—Ä–∞—É–∑–µ—Ä –æ—Ç–∫—Ä—ã—Ç ‚úÖ')


async def main():
    await dp.start_polling(Bot)

if __name__ == "__main__":
    try:
        logging.basicConfig(level=logging.INFO, stream=sys.stdout)
        asyncio.run(main())
    except KeyboardInterrupt:
        print ('–ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω')
            